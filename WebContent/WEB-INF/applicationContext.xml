<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd"> 
        
        


    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
         
    <!-- 1:配置SecurityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!-- <property name="sessionMode" value="native"/> -->
        <!-- <property name="realm" ref="jdbcRealm"/> -->    <!-- 这是配置单个Realm的时候 -->
        
        <!-- 这里是通过引用外部文件的方式配置多Realm -->
        <!-- <property name="authenticator" ref="authenticator"/> --> <!-- 通过配置authenticator，引用下文中的authenticator，可以实现配置多个Realm。多种方法加密后，多次比对，增加安全性 -->
        <!-- 这里是通过直接将Realm的集合注入到securityManager的属性中的方式配置多Realm -->
        <property name="realms">
        	<list>
				<ref bean="jdbcRealm"/>
				<ref bean="secondRealm"/>
			</list>
        </property>
        <!-- 设置记住我功能的cookie的时长 -->
        <!-- 这里测试有问题，不知道什么原因 -->
        <!-- <property name="remenberMeManager.cookie.maxAge" value="10"></property>  -->
        
    </bean>



    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- 2:配置CatchManager
    	 2.1:需要加入ehcache的jar包及配置文件
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean>


	<!-- 多Realm的配置方式 -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		
		<!-- 这是通过引用外部属性的方式配置多Realm，为了授权，所以取消这种配置方式，直接配置到上文中securityManager属性中 -->
		<!-- 
		<property name="realms">     给其中注入一个集合，这里使用list集合，注意：既然是list集合，所以Realm的认证是有序的
			<list>
				<ref bean="jdbcRealm"/>
				<ref bean="secondRealm"/>
			</list>
		</property>
		-->
		
		<!-- 
			修改认证策略,默认认证策略是AtLeastOneSuccessfulStrategy，只要有一个Realm验证成功即可
			而AllSuccessfulStrategy认证策略必须所有realm验证成功才算成功，如果有一个失败就失败了
		 -->
		 
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
		</property>
		 
		 <!-- 修改认证策略 -->
		 <!-- 
		 <property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
		 -->
		 
	</bean>
	

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!-- 
    	3：配置Realm
    	3.1：直接配置实现了com.atguigu.shiro.realms.ShiroRealm接口的bean
     -->
     <!-- MD5加密 -->
    <bean id="jdbcRealm" class="com.atguigu.shiro.realms.ShiroRealm">
    	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="MD5"></property>
    			<property name="hashIterations" value="1024"></property>     <!-- 加密次数，加密次数越多则字符串越复杂 -->
    		</bean>
    	</property>
    </bean>
    
    <!-- SHA1加密 -->
    <bean id="secondRealm" class="com.atguigu.shiro.realms.SecondRealm">
    	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="SHA1"></property>
    			<property name="hashIterations" value="1024"></property>     <!-- 加密次数，加密次数越多则字符串越复杂 -->
    		</bean>
    	</property>
    </bean>
    

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 
    	4:配置bean生命周期处理器LifecycleBeanPostProcessor,可以自动的来调用配置在Spring Ioc容器中shiro bean的生命周期方法
     -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 
    	5:启用IOC容器中使用shiro的注解，但必须在配置了LifecycleBeanPostProcessor之后才可以使用
     -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- 
    	6：配置ShiroFilter
    	6.1:id必须heweb.xml文件中配置的DelegatingFilterProxy的<filter-name>一致
    		如果不一致，就会抛出NoSuchBeanDefinitionException，因为Shiro会来IOC容器中查找和<filter-name>名字对应的filter bean
    	6.2:
     -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>        <!-- 登录页面 -->
        <property name="successUrl" value="/list.jsp"/>		  <!-- 登陆成功页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>     <!-- 没有权限的页面 -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!-- 
        	配置哪些页面需要受保护，
        	以及访问这些页面需要的权限
        	1：anon 可以被匿名访问
        	2：authc 必须认证（即登录）后才能访问的页面
        	3:logout 登出
        	4:roles 角色过滤器
        	
        	查看所有权限：ctrl+shift+t搜索DefaultFilter(这是一个枚举类),如下：
        	anon(AnonymousFilter.class),
		    authc(FormAuthenticationFilter.class),
		    authcBasic(BasicHttpAuthenticationFilter.class),
		    logout(LogoutFilter.class),
		    noSessionCreation(NoSessionCreationFilter.class),
		    perms(PermissionsAuthorizationFilter.class),
		    port(PortFilter.class),
		    rest(HttpMethodPermissionFilter.class),
		    roles(RolesAuthorizationFilter.class),
		    ssl(SslFilter.class),
		    user(UserFilter.class);							
         -->
        <property name="filterChainDefinitions">
            <value>
            	/login.jsp = anon     <!-- login页面可以匿名访问，不用登录，如果访问其他需要认证的页面，就会自动重定向到login页面   -->
            	/shiro/login = anon   <!-- 放行shiro/login请求 -->
            	/shiro/logout = logout
            
            	/user.jsp = roles[user]
            	/admin.jsp = roles[admin]
            
            
                /favicon.ico = anon
                /logo.png = anon
                /shiro.css = anon
                /s/login = anon
                # allow WebStart to pull the jars for the swing app:
                /*.jar = anon
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
        
      
    <!-- 配置一个bean，该bean实际上是一个Map，通过实力工厂方法的方式 -->   
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder"
    	factory-method="buildFilterChainDefinitionMap"></bean>
    
    <bean id="filterChainDefinitionMapBuilder" 
    	class="com.atguigu.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
        
        
        
    <!-- 配置shiroService的bean -->    
    <bean id="shiroservice" class="com.atguigu.shiro.services.ShiroService"></bean>
        
</beans>